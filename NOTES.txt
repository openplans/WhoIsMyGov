OFFICES TA CARES ABOUT
======================

 * City Council (by council districts)

 * Controller (citywide)

 * Mayor (citywide)

 * Public Advocate (citywide)

 * Borough President (by borough)

 * DA (manhattan only for now; by borough)




DATA
======

 http://www.nyc.gov/html/dcp/html/bytes/dwndistricts.shtml

 District shapefiles:

 * City Council:
   http://www.nyc.gov/html/dcp/download/bytes/nycc_08cav.zip


CODE NOTES
=============



Plan
=====

* Use SRID = 4326 aka
  WGS84(http://en.wikipedia.org/wiki/World_Geodetic_System) 
  ... which seems to be what blockparty uses; stores things as lon/lat
  pairs so i can easily query for which district contains a lon/lat 

* This apparently works to find my home districts (LONGITUDE FIRST):

  select * from districts where districts.geometry is not NULL and st_contains(districts.geometry, ST_GeomFromText('POINT(-73.96805047988892 40.677578720206355 )', 4326));

* Refactor the models as per below.



NEW DATA MODEL
======================

 From a location, we look up one or more districts (they can overlap).
 But we realy need to factor out some data from the districts.


 * An Election has these direct attributes:
   - election date
   - name
   - stagename ("Primary" | "General")

 * Person has these attributes:

   - fullname

   - incumbent_office (name of the office currently held, can be NULL)

   - incumbent_district (id of district, can be NULL)

   - arbitrary other key/vals via people_meta_table


  An Election takes place in N Districts, each modeled via a
  Race association class. (many-to-many)

  - An Race has references to one District and one
    Election.

  - Race also has an 'office' column that
    just holds the string name of the office being elected. (Those
    could get normalized out into separate objects later.)

  - District has backrefs to O-N Elections (via Races).
  - Election has backrefs to O-N Districts (via Races).


  - A Race also has 0-N People, who are the candidates
    for that office in that election. (one-to-many)

  - a Person has backrefs to at most 1 Race, and thus
    indirectly to 0-1 Elections and 0-1 Districts.

  Given all that, convenience methods could yield useful things like
  "latest election a candidate ran in".

  So, eg. to find incumbents and candidates given an address and a
  date:

  - look up Races where Race.Election.date
    matches the date, and Race.District.geography matches
    the address.
   
  - for each Race:
    eg. Race(election=Election('NY Primaries 2009'),
                         district=District('Brooklyn'),
                         office='Borough President')

    - from Race.district, yield the incumbents
      eg. Person('Bob Jones', incumbent_office='Borough President',
                 incumbent_district=District('Brooklyn'))

    - yield all Race.candidates
      eg. Person('Lisa James', incumbent_office=None)



DEFERRED: Slightly more complex again
-------------------------------------

Basically same as above, except Office becomes a first-class object,
and we add a concept of Party.
   


Votesmart usage examples:
-----------------------------

nyc_id = 898
nyc_officials = votesmart.local.getOfficials(nyc_id)
pprint([(c.lastName, c.title, c.officeParties) for c in nyc_officials])
